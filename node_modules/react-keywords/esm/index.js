import { Fragment, useMemo } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var Highlight = props => {
  var {
    children,
    value,
    color,
    backgroundColor,
    render
  } = props;
  var child = useMemo(() => render ? render(value, color, backgroundColor) : /*#__PURE__*/_jsx("span", {
    style: {
      color,
      backgroundColor
    },
    children: value
  }), [color, backgroundColor, value]);
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [children, value && child]
  });
};

var KeywordsInner = props => {
  var {
    children,
    caseIgnored = true,
    color = 'inherit',
    backgroundColor = '#ffff00',
    value,
    render
  } = props;
  if (typeof children !== 'string') return /*#__PURE__*/_jsx(Fragment, {
    children: children
  });
  var splitMatch = new RegExp((value || '').replace(/\\/g, '\\\\'), caseIgnored ? 'ig' : 'g');
  var values = value ? children.match(splitMatch) : [];
  var matched = children.split(splitMatch);
  return /*#__PURE__*/_jsx(Fragment, {
    children: matched.map((item, idx) => {
      return /*#__PURE__*/_jsx(Highlight, {
        color: color,
        value: matched.length > idx + 1 ? values[idx] : undefined,
        render: render,
        backgroundColor: backgroundColor,
        children: item
      }, idx);
    })
  });
};

export default KeywordsInner;
//# sourceMappingURL=index.js.map